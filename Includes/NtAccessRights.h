#pragma once

#ifndef _NTACCESSRIGHTS_
#define _NTACCESSRIGHTS_

#include "NtCommonDefs.h"


extern "C" {

    // typedef DWORD ACCESS_MASK;

    typedef enum _ACCESS_MASK {
        DELETE = 0x00010000L,
        READ_CONTROL = 0x00020000L,
        WRITE_DAC = 0x00040000L,
        WRITE_OWNER = 0x00080000L,
        SYNCHRONIZE = 0x00100000L,

        STANDARD_RIGHTS_REQUIRED = 0x000F0000L,

        STANDARD_RIGHTS_READ = READ_CONTROL,
        STANDARD_RIGHTS_WRITE = READ_CONTROL,
        STANDARD_RIGHTS_EXECUTE = READ_CONTROL,

        STANDARD_RIGHTS_ALL = 0x001F0000L,

        SPECIFIC_RIGHTS_ALL = 0x0000FFFFL
    } ACCESS_MASK;

//#define DELETE                           (0x00010000L)
//#define READ_CONTROL                     (0x00020000L)
//#define WRITE_DAC                        (0x00040000L)
//#define WRITE_OWNER                      (0x00080000L)
//#define SYNCHRONIZE                      (0x00100000L)
//
//#define STANDARD_RIGHTS_REQUIRED         (0x000F0000L)
//
//#define STANDARD_RIGHTS_READ             (READ_CONTROL)
//#define STANDARD_RIGHTS_WRITE            (READ_CONTROL)
//#define STANDARD_RIGHTS_EXECUTE          (READ_CONTROL)
//
//#define STANDARD_RIGHTS_ALL              (0x001F0000L)
//
//#define SPECIFIC_RIGHTS_ALL              (0x0000FFFFL)

    // File related
    typedef enum _FILE_ACCESS_MASK {
        FILE_READ_DATA = 0x0001, // file & pipe
        FILE_LIST_DIRECTORY = 0x0001, // directory
        FILE_WRITE_DATA = 0x0002, // file & pipe
        FILE_ADD_FILE = 0x0002, // directory
        FILE_APPEND_DATA = 0x0004, // file
        FILE_ADD_SUBDIRECTORY = 0x0004, // directory
        FILE_CREATE_PIPE_INSTANCE = 0x0004, // named pipe
        FILE_READ_EA = 0x0008, // file & directory
        FILE_WRITE_EA = 0x0010, // file & directory
        FILE_EXECUTE = 0x0020, // file
        FILE_TRAVERSE = 0x0020, // directory
        FILE_DELETE_CHILD = 0x0040, // directory
        FILE_READ_ATTRIBUTES = 0x0080, // all
        FILE_WRITE_ATTRIBUTES = 0x0100, // all

        FILE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x1FF),
        FILE_GENERIC_READ = (STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES | FILE_READ_EA | SYNCHRONIZE),
        FILE_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE | FILE_WRITE_DATA | FILE_WRITE_ATTRIBUTES | FILE_WRITE_EA |
            FILE_APPEND_DATA | SYNCHRONIZE),
        FILE_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE | FILE_READ_ATTRIBUTES | FILE_EXECUTE | SYNCHRONIZE)
    } FILE_ACCESS_MASK;

    typedef enum _EVENT_ACCESS_MASK {
        EVENT_MODIFY_STATE = 0x0002,
        EVENT_ALL_ACCESS = ( STANDARD_RIGHTS_REQUIRED |SYNCHRONIZE | 0x3) 
    } EVENT_ACCESS_MASK;

    typedef enum _KEY_ACCESS_MASK {
        KEY_QUERY_VALUE  = 0x0001,
        KEY_SET_VALUE = 0x0002,
        KEY_CREATE_SUB_KEY = 0x0004,
        KEY_ENUMERATE_SUB_KEYS = 0x0008,
        KEY_NOTIFY = 0x0010,
        KEY_CREATE_LINK = 0x0020,
        KEY_WOW64_32KEY = 0x0200,
        KEY_WOW64_64KEY = 0x0100,
        KEY_WOW64_RES = 0x0300,
        
        KEY_READ = (STANDARD_RIGHTS_READ | KEY_QUERY_VALUE | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY) & (~SYNCHRONIZE),
        KEY_WRITE = (STANDARD_RIGHTS_WRITE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY) & (~SYNCHRONIZE),
        KEY_EXECUTE = KEY_READ & (~SYNCHRONIZE),
        KEY_ALL_ACCESS = (STANDARD_RIGHTS_ALL | KEY_QUERY_VALUE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY |
            KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY | KEY_CREATE_LINK) & (~SYNCHRONIZE)
    } KEY_ACCESS_MASK;

    typedef enum _MUTANT_ACCESS_MASK {
        MUTANT_QUERY_STATE = 0x0001,
        MUTANT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | MUTANT_QUERY_STATE)
    } MUTANT_ACCESS_MASK;

    typedef enum _SEMAPHORE_ACCESS_MASK {
        SEMAPHORE_MODIFY_STATE = 0x0002,
        SEMAPHORE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x3)
    }SEMAPHORE_ACCESS_MASK;

    typedef enum _TIMER_ACCESS_MASK {
        TIMER_QUERY_STATE = 0x0001,
        TIMER_MODIFY_STATE = 0x0002,
        TIMER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | TIMER_QUERY_STATE | TIMER_MODIFY_STATE)
    } TIMER_ACCESS_MASK;
}

#endif